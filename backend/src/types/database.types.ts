// src/types/database.types.ts

// Database type definitions for TypeScript
// This would typically be auto-generated by Supabase CLI using:
// npx supabase gen types typescript --local > src/types/database.types.ts

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      documents: {
        Row: {
          id: string
          title: string
          description: string | null
          document_type: string | null
          document_number: string | null
          creator_info: Json
          creation_date: string | null
          status: 'INGESTING' | 'REGISTERED' | 'ACTIVE_STORAGE' | 'REVIEW' | 'DESTROY' | 'AWAITING_TRANSFER' | 'TRANSFERRED' | 'NEEDS_CLASSIFICATION' // <--- STATUS ADDED HERE
          retention_category: '10y' | '30y' | 'permanent' | null
          retention_end_date: string | null
          is_public: boolean
          release_date: string | null
          confidentiality_note: string | null
          upload_timestamp: string
          uploader_user_id: string | null
          ai_suggested_title: string | null
          ai_predicted_retention: '10y' | '30y' | 'permanent' | null
          ai_detected_pii: Json
          metadata: Json
          tags: string[]
          search_vector: unknown | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          title?: string | null // MODIFIED: Changed from 'string' to allow null
          description?: string | null
          document_type?: string | null
          document_number?: string | null
          creator_info?: Json
          creation_date?: string | null
          status?: 'INGESTING' | 'REGISTERED' | 'ACTIVE_STORAGE' | 'REVIEW' | 'DESTROY' | 'AWAITING_TRANSFER' | 'TRANSFERRED' | 'NEEDS_CLASSIFICATION' // <--- STATUS ADDED HERE
          retention_category?: '10y' | '30y' | 'permanent' | null
          retention_end_date?: string | null
          is_public?: boolean
          release_date?: string | null
          confidentiality_note?: string | null
          upload_timestamp?: string
          uploader_user_id?: string | null
          ai_suggested_title?: string | null
          ai_predicted_retention?: '10y' | '30y' | 'permanent' | null
          ai_detected_pii?: Json
          metadata?: Json
          tags?: string[]
          search_vector?: unknown | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          title?: string | null // MODIFIED: Changed from 'string' to allow null
          description?: string | null
          document_type?: string | null
          document_number?: string | null
          creator_info?: Json
          creation_date?: string | null
          status?: 'INGESTING' | 'REGISTERED' | 'ACTIVE_STORAGE' | 'REVIEW' | 'DESTROY' | 'AWAITING_TRANSFER' | 'TRANSFERRED' | 'NEEDS_CLASSIFICATION' // <--- STATUS ADDED HERE
          retention_category?: '10y' | '30y' | 'permanent' | null
          retention_end_date?: string | null
          is_public?: boolean
          release_date?: string | null
          confidentiality_note?: string | null
          upload_timestamp?: string
          uploader_user_id?: string | null
          ai_suggested_title?: string | null
          ai_predicted_retention?: '10y' | '30y' | 'permanent' | null
          ai_detected_pii?: Json
          metadata?: Json
          tags?: string[]
          search_vector?: unknown | null
          created_at?: string
          updated_at?: string
        }
      }
      document_files: {
        Row: {
          id: string
          document_id: string
          file_type: 'original' | 'redacted' | 'ocr_text' | 'transfer'
          file_name: string
          storage_bucket: string
          storage_key: string
          storage_region: string
          mime_type: string | null
          file_size: number | null
          checksum: string
          checksum_algorithm: string
          ocr_text: string | null
          ocr_confidence: number | null
          processing_metadata: Json
          created_at: string
        }
        Insert: {
          id?: string
          document_id: string
          file_type?: 'original' | 'redacted' | 'ocr_text' | 'transfer'
          file_name: string
          storage_bucket?: string
          storage_key: string
          storage_region?: string
          mime_type?: string | null
          file_size?: number | null
          checksum: string
          checksum_algorithm?: string
          ocr_text?: string | null
          ocr_confidence?: number | null
          processing_metadata?: Json
          created_at?: string
        }
        Update: {
          id?: string
          document_id?: string
          file_type?: 'original' | 'redacted' | 'ocr_text' | 'transfer'
          file_name?: string
          storage_bucket?: string
          storage_key?: string
          storage_region?: string
          mime_type?: string | null
          file_size?: number | null
          checksum?: string
          checksum_algorithm?: string
          ocr_text?: string | null
          ocr_confidence?: number | null
          processing_metadata?: Json
          created_at?: string
        }
      }
      user_profiles: {
        Row: {
          id: string
          full_name: string
          email: string
          role: 'clerk' | 'archivist' | 'citizen' | 'media' | 'inspector' | 'admin'
          institution: string | null
          phone: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id: string
          full_name: string
          email: string
          role?: 'clerk' | 'archivist' | 'citizen' | 'media' | 'inspector' | 'admin'
          institution?: string | null
          phone?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          full_name?: string
          email?: string
          role?: 'clerk' | 'archivist' | 'citizen' | 'media' | 'inspector' | 'admin'
          institution?: string | null
          phone?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      audit_logs: {
        Row: {
          id: string
          timestamp: string
          user_id: string | null
          user_email: string | null
          action: string
          entity_type: string
          entity_id: string | null
          details: Json
          ip_address: string | null
          user_agent: string | null
          hash: string
          previous_hash: string | null
          created_at: string
        }
        Insert: {
          id?: string
          timestamp?: string
          user_id?: string | null
          user_email?: string | null
          action: string
          entity_type: string
          entity_id?: string | null
          details?: Json
          ip_address?: string | null
          user_agent?: string | null
          hash: string
          previous_hash?: string | null
          created_at?: string
        }
        Update: {
          // Audit logs are immutable - no updates allowed
        }
      }
      access_requests: {
        Row: {
          id: string
          requester_name: string
          requester_email: string
          requester_phone: string | null
          requester_id_number: string | null
          requester_organization: string | null
          document_id: string | null
          justification: string
          intended_use: string | null
          status: 'pending' | 'approved' | 'rejected'
          processed_by_user_id: string | null
          processed_at: string | null
          rejection_reason: string | null
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          requester_name: string
          requester_email: string
          requester_phone?: string | null
          requester_id_number?: string | null
          requester_organization?: string | null
          document_id?: string | null
          justification: string
          intended_use?: string | null
          status?: 'pending' | 'approved' | 'rejected'
          processed_by_user_id?: string | null
          processed_at?: string | null
          rejection_reason?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          requester_name?: string
          requester_email?: string
          requester_phone?: string | null
          requester_id_number?: string | null
          requester_organization?: string | null
          document_id?: string | null
          justification?: string
          intended_use?: string | null
          status?: 'pending' | 'approved' | 'rejected'
          processed_by_user_id?: string | null
          processed_at?: string | null
          rejection_reason?: string | null
          created_at?: string
          updated_at?: string
        }
      }
      processing_queue: {
        Row: {
          id: string
          task_type: string
          priority: number
          payload: Json
          status: string
          attempts: number
          max_attempts: number
          scheduled_for: string
          started_at: string | null
          completed_at: string | null
          last_error: string | null
          error_count: number
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          task_type: string
          priority?: number
          payload: Json
          status?: string
          attempts?: number
          max_attempts?: number
          scheduled_for?: string
          started_at?: string | null
          completed_at?: string | null
          last_error?: string | null
          error_count?: number
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          task_type?: string
          priority?: number
          payload?: Json
          status?: string
          attempts?: number
          max_attempts?: number
          scheduled_for?: string
          started_at?: string | null
          completed_at?: string | null
          last_error?: string | null
          error_count?: number
          created_at?: string
          updated_at?: string
        }
      }
    }
    Views: {
      // Add any database views here
    }
    Functions: {
      create_audit_log: {
        Args: {
          p_action: string
          p_entity_type: string
          p_entity_id: string
          p_details?: Json
        }
        Returns: string
      }
      queue_task: {
        Args: {
          p_task_type: string
          p_payload: Json
          p_priority?: number
          p_scheduled_for?: string
        }
        Returns: string
      }
      transition_document_status: {
        Args: {
          p_document_id: string
          p_new_status: 'INGESTING' | 'REGISTERED' | 'ACTIVE_STORAGE' | 'REVIEW' | 'DESTROY' | 'AWAITING_TRANSFER' | 'TRANSFERRED' | 'NEEDS_CLASSIFICATION' // <--- STATUS ADDED HERE
          p_notes?: string
        }
        Returns: Database['public']['Tables']['documents']['Row']
      }
      check_document_access: {
        Args: {
          p_document_id: string
        }
        Returns: boolean
      }
      get_pending_tasks: {
        Args: {
          p_limit?: number
        }
        Returns: Database['public']['Tables']['processing_queue']['Row'][]
      }
      verify_audit_log_integrity: {
        Args: Record<PropertyKey, never>
        Returns: {
          is_valid: boolean
          invalid_at_id: string | null
          expected_hash: string | null
          actual_hash: string | null
        }
      }
    }
    Enums: {
      document_status: 'INGESTING' | 'REGISTERED' | 'ACTIVE_STORAGE' | 'REVIEW' | 'DESTROY' | 'AWAITING_TRANSFER' | 'TRANSFERRED' | 'NEEDS_CLASSIFICATION' // <--- STATUS ADDED HERE
      retention_category: '10y' | '30y' | 'permanent'
      file_type: 'original' | 'redacted' | 'ocr_text' | 'transfer'
      access_request_status: 'pending' | 'approved' | 'rejected'
      user_role: 'clerk' | 'archivist' | 'citizen' | 'media' | 'inspector' | 'admin'
    }
  }
}

// Helper types for common use cases
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
export type Enums<T extends keyof Database['public']['Enums']> = Database['public']['Enums'][T]

// Specific type exports for convenience
export type Document = Tables<'documents'>
export type DocumentFile = Tables<'document_files'>
export type UserProfile = Tables<'user_profiles'>
export type AuditLog = Tables<'audit_logs'>
export type AccessRequest = Tables<'access_requests'>
export type ProcessingQueueTask = Tables<'processing_queue'>

export type DocumentStatus = Enums<'document_status'>
export type RetentionCategory = Enums<'retention_category'>
export type FileType = Enums<'file_type'>
export type AccessRequestStatus = Enums<'access_request_status'>
export type UserRole = Enums<'user_role'>

// Type guards
export const isDocumentStatus = (value: any): value is DocumentStatus => {
  return ['INGESTING', 'REGISTERED', 'ACTIVE_STORAGE', 'REVIEW', 'DESTROY', 'AWAITING_TRANSFER', 'TRANSFERRED', 'NEEDS_CLASSIFICATION'].includes(value) // <--- STATUS ADDED HERE
}

export const isRetentionCategory = (value: any): value is RetentionCategory => {
  return ['10y', '30y', 'permanent'].includes(value)
}

export const isUserRole = (value: any): value is UserRole => {
  return ['clerk', 'archivist', 'citizen', 'media', 'inspector', 'admin'].includes(value)
}